// Code generated by golox-ast. DO NOT EDIT.
package ast

import (
	"github.com/doeg/golox/golox/token"
)

type Visitor interface {
	visitBinaryExpr(expr *Binary) any
	visitGroupingExpr(expr *Grouping) any
	visitLiteralExpr(expr *Literal) any
	visitUnaryExpr(expr *Unary) any
}

type Expr interface {
	accept(Visitor) any
}

type Binary struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

func (e *Binary) accept(v Visitor) any {
	return v.visitBinaryExpr(e)
}

type Grouping struct {
	Expression Expr
}

func (e *Grouping) accept(v Visitor) any {
	return v.visitGroupingExpr(e)
}

type Literal struct {
	Value interface{}
}

func (e *Literal) accept(v Visitor) any {
	return v.visitLiteralExpr(e)
}

type Unary struct {
	Operator *token.Token
	Right    Expr
}

func (e *Unary) accept(v Visitor) any {
	return v.visitUnaryExpr(e)
}
